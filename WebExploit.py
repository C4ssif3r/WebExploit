def WebExploit():
    '''
    'MJI 3> ARI'
    _____________
    MIT License

Copyright (c) 2022 MJi | DarkÆ¤wn [github.com/c4ssif3r]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''


    import os,sys
    from colorama import Fore as f
    import time as t
    from treelib import Node, Tree
    tree = Tree()
    class FlowerNode(Node):
        def __init__(self, color):
            self.color = color
    fnode = FlowerNode("white")

    from cores import baner #bnr
    from cores import dirboster #dirboster
    from cores import zipc # zip password cracker
    from cores import rarc # rar password cracker
    from cores import aps #advanced port scanner
    from cores import wpf # wordpress plugin finder
    from cores import ipl # ip location tool
    from cores import ril # reverce ip lookup
    from cores import ssc # ssh cracker
    from cores import fpc # ftp cracker
    from cores import b64 # base 16, 32, 64, 85 tools . enc . dec
    from cores import sse # shodan search engine
    from cores import cms # content management system detector
    from cores import cfb # CloadFlare bypasser
    from cores import mojiana # my love = A | M3>
    from cores import ping # ping tool
    from cores import ahf # angry hash finder
    reset = "\033[0m"
    red = "\033[0;31m"
    class C:
        '''
        Define Colors By Manual.
        '''
        black = "\033[0;30m"
        red = "\033[0;31m"
        green = "\033[0;32m"
        brown = "\033[0;33m"
        blue = "\033[0;34m"
        purple = "\033[0;35m"
        cyan = "\033[0;36m"
        l_gray = "\033[0;37m"
        dark_gray = "\033[1;30m"
        l_red = "\033[1;31m"
        red = "\033[1;31m"
        l_green = "\033[1;32m"
        green = "\033[1;32m"
        yellow = "\033[1;33m"
        l_blue = "\033[1;34m"
        l_purple = "\033[1;35m"
        l_cyan = "\033[1;36m"
        l_white = "\033[1;37m"
        faint = "\033[2m"
        italic = "\033[3m"
        underline = "\033[4m"
        blink = "\033[5m"
        nefative = "\033[7m"
        cross = "\033[9m"
        ended = "\033[0m"
        bold = "\033[1m"
        nbold = "\033[0m"
        reset = "\033[0m"
        white = f.WHITE
    global c
    c = C

    while True:
        bnr = baner.baner()
        print (bnr+f.WHITE+".VERSION 1.0.0 \MJ\\"+C.reset+C.bold)
        print ('|')
        #print(f.WHITE+""+C.reset+C.bold)
        class F(object):
            def __init__(self, color):
                self.color = color

        ftree = Tree()
        tree = Tree()
        tree1 = Tree()
        tree2 = Tree()
        tree3 = Tree()
        tree.create_node("Web Exploit", "WebExploit")  # root
        tree.create_node("1- Information Gathering", "info", parent="WebExploit")
        #tree.create_node("", "", parent="crack")
        # tree.create_node("2- Web Hacking", "WebHacking", parent="WebExploit")
        # tree.create_node("Mojiana [EYE Cracker Tool] Crack All HTTP[S][post-[form]][get-[form]]", "mojiana2", parent="WebHacking")
        # tree.create_node("Content Management", "cms12", parent="WebHacking")
        tree.create_node("2- Private Web Hacking", "p8web", parent="WebExploit")
        tree.create_node("Mojiana [EYE Cracker Tool] Crack All HTTP[S][post-[form]][get-[form]]", "mojiana3", parent="p8web")
        tree.create_node("Brute Force Directories - [Dir Booster]", "dirboster", parent="p8web")
        tree.create_node("Cloud Flare Bypass - [Get Real Ip]", "cfb2", parent="p8web")
        tree.create_node("3- Password Attacks", "crack", parent="WebExploit")
        tree.create_node("Base 16,32,64,85 Encode | Decode", "ba64", parent="crack")
        tree.create_node("Mojiana [EYE Cracker Tool] Crack All HTTP[S][post-[form]][get-[form]]", "mojiana", parent="crack")
        tree.create_node("SSH cracker Tool", "sshc", parent="crack")
        tree.create_node("FTP cracker Tool", "ftpc", parent="crack")
        tree.create_node("ZIP password cracker Tool", "zipC", parent="crack")
        tree.create_node("RAR password cracker Tool", "rarC", parent="crack")

        tree.create_node("Angry Hash Type Finder - [Identifier]", "aAHF", parent="crack")
        tree.create_node("Reverse Ip Lookup - [Get Sites On a IP]", "ril2", parent="p8web")


        tree.create_node("Cloud Flare Bypass - [Get Real Ip]", "cfb", parent="info")
        tree.create_node("Get Location By Ip v4", "ipl", parent="info")
        tree.create_node("Brute Force Directories - [Dir Booster]", "dirbooster", parent="info")
        tree.create_node("Advanced Port Scanner", "aps", parent="info")
        tree.create_node("Reverse Doamin Lookup - [Get Sites on a IP]", "ril", parent="info")
        tree.create_node("Base 16,32,64,85 Tool Enc-Dec", "b64", parent="info")
        tree.create_node("Shodan Search Engine + [Save Results]", "sse", parent="info")
        tree.create_node("Content Management System Detector", "cms", parent="info")
        tree.create_node("Angry Hash Type Finder - [Identifier]", "ahf", parent="info")
        tree.create_node("Ping Tool - [By External Server]", "ping", parent="info")
        #tree.create_node("Version 1.0.0 \mj\\", "version", parent="WebExploit")
    #tree.create_node("", "", parent="info")
    # TREE 1
        # print ('\n')
        tree1.create_node("Information Gathering", "infog") # root info g
        tree1.create_node("0 -> Advanced Port Scanner", "aps2", parent='infog')
        tree1.create_node("1 -> Angry Hash Type Finder - [Identifier]", "ang2", parent='infog')
        tree1.create_node("2 -> Base 16,32,64,85 Tool Enc-Dec", "bse2", parent='infog')
        tree1.create_node("3 -> Brute Force Directories - [Dir Booster]", "db2", parent='infog')
        tree1.create_node("4 -> Cloud Flare Bypass - [Get Real Ip]", "clb2", parent='infog')
        tree1.create_node("5 -> Content Management System Detector", "cms2", parent='infog')
        tree1.create_node("6 -> Get Location By Ip v4 [show on google map]", "ipl2", parent='infog')
        tree1.create_node("7 -> Ping Tool - [By External Server]", "ping2", parent='infog')
        tree1.create_node("8 -> Reverse Domain Lookup - [Get Sites on a IP]", "rdl2", parent='infog')
        tree1.create_node("9 -> Shodan Search Engine + [Save Results]", "sse2", parent='infog')
    # web attacks
    #ftree.show()
    # TREE 2
        tree2.create_node("Private Web Hacking", "p8_2") # root
        tree2.create_node("0 -> Brute Force Directories - [Dir Booster]", "bfd2", parent='p8_2')
        tree2.create_node("1 -> Cloud Flare Bypass - [Get Real Ip]", "cfb2", parent='p8_2')
        tree2.create_node("2 -> Mojiana [EYE Cracker Tool] Crack All HTTP[S][post-[form]][get-[form]] </mji&ari>4y", "mjiari2", parent='p8_2')
        tree2.create_node("3 -> Reverse Ip Lookup - [Get Sites On a IPv4]", "ril3", parent='p8_2')
    # TREE 3
        tree3.create_node("Crack And Password Attacks", "cpa") # root
        tree3.create_node("0 -> Angry Hash Type Finder - [Identifier]", "ag2", parent='cpa')
        tree3.create_node("1 -> Base 16,32,64,85 Encode | Decode", "b_all", parent='cpa')
        tree3.create_node("2 -> FTP cracker Tool", "ftp2", parent='cpa')
        tree3.create_node("3 -> Mojiana [EYE Cracker Tool] Crack All HTTP[S][post-[form]][get-[form]]", "mjiari3", parent='cpa')
        tree3.create_node("4 -> RAR password cracker Tool", "rar2", parent='cpa')
        tree3.create_node("5 -> SSH cracker Tool", "ssh2", parent='cpa')
        tree3.create_node("6 -> ZIP password cracker Tool", "zip2", parent='cpa')

        print('.MJi')
        print('|')
        tree.show()
        try:

            method = input(f'.{C.italic}/Mji/WebExploit:~# {C.bold}{C.green}')
            if method == 1 or '1' in method:

                    try:
                        while True:
                            os.system('clear')
                            print (bnr)
                            print(f.WHITE+""+reset)
                            tree1.show()
                            mj = input(f'.{C.italic}/Mji/WebExploit/Information-Gathering{C.reset}:~# {C.bold}{C.green}')
                            if mj:
                                if mj == '0':
                                    print (f'{c.reset}')
                                    aps.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '1':
                                    print (f'{c.reset}')
                                    ahf.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '2':
                                    print (f'{c.reset}')
                                    b64.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '3':
                                    print (f'{c.reset}')
                                    
                                    dirboster.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '4':
                                    print (f'{c.reset}')
                                    cfb.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '5':
                                    print (f'{c.reset}')
                                    cms.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '6':
                                    print (f'{c.reset}')
                                    ipl.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '7':
                                    print (f'{c.reset}')
                                    ping.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '8':
                                    print (f'{c.reset}')
                                    ril.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '9':
                                    print (f'{c.reset}')
                                    sse.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    

                                else:
                                    input(f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
                                    continue
                            else:
                              #  input("press enter for back to menu")
                                print (f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
                                cmd=input(f'{C.red}{C.bold}WebExploit{C.reset} - exit ? y/n -> {C.green}').lower()
                                if 'y' in cmd:
                                    print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
                                    break
                                    sys.exit(0)
                                # else:
                                #     input(f'{C.red}{C.bold}WebExploit{C.white} -> Invalid Command Try Again [{C.bold}press enter{C.white}]')
                                #     continue
                    except Exception as derr:
                        print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye! {derr}')
                        sys.exit(0)


            if method == 2 or '2' in method:
                    try:
                        while True:
                            os.system('clear')
                            print (bnr)
                            print(f.WHITE+""+reset)
                            tree2.show()
                            mj = input(f'.{C.italic}/Mji/WebExploit/Private Web Hacking{C.reset}:~# {C.bold}{C.green}')
                            if mj:
                                if mj == '0':
                                    print (f'{c.reset}')
                                    dirboster.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                elif mj == '1':
                                    print (f'{c.reset}')
                                    cfb.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                elif mj == '2':
                                    print (f'{c.reset}')
                                    mojiana.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                elif mj == '3':
                                    print (f'{c.reset}')
                                    ril.run()
                               #     input('press enter for back to menu and press CTRL+C for exit')
                                else:
                                    input(f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
                                    continue
                            else:
                                print (f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
                                cmd=input(f'{C.red}{C.bold}WebExploit{C.reset} - exit ? y/n -> {C.green}').lower()
                                if 'y' in cmd:
                                    print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
                                    sys.exit(0)
                                #     input(f'{C.red}{C.bold}WebExploit{C.white} -> Invalid Command Try Again [{C.bold}press enter{C.white}]')
                                #     continue
                    except:
                        print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
                        sys.exit(0)
            # TREE 3
            if method == 3 or '3' in method:

                    try:
                        while True:
                            os.system('clear')
                            print (bnr)
                            print(f.WHITE+""+reset)
                            tree3.show()
                            mj = input(f'.{C.italic}/Mji/WebExploit/PasswordAttack-Crack{C.reset}:~# {C.bold}{C.green}')
                            if mj:
                                if mj == '0':
                                    print (f'{c.reset}')
                                    ahf.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '1':
                                    print (f'{c.reset}')
                                    b64.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '2':
                                    print (f'{c.reset}')
                                    fpc.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '3':
                                    print (f'{c.reset}')
                                    mojiana.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '4':
                                    print (f'{c.reset}')
                                    rarc.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '5':
                                    print (f'{c.reset}')
                                    ssc.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    
                                if mj == '6':
                                    print (f'{c.reset}')
                                    zipc.run()
                                    input('press enter for back to menu and press CTRL+C for exit')
                                    

                                else:
                                    input(f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
                                    continue
                            else:
                                input("press enter for back to menu")
                                print (f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
                                cmd=input(f'{C.red}{C.bold}WebExploit{C.reset} - exit ? y/n -> {C.green}').lower()
                                if 'y' in cmd:
                                    print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
                                    sys.exit(0)
                                #     input(f'{C.red}{C.bold}WebExploit{C.white} -> Invalid Command Try Again [{C.bold}press enter{C.white}]')
                                #     continue
                    except:
                        print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
                        sys.exit(0)
            # if method == 4 or '4' in method:
            #
            #         try:
            #             while True:
            #                 os.system('clear')
            #                 print (bnr)
            #                 print(f.WHITE+""+reset)
            #
            #                 tree1.show()
            #                 mj = input(f'.{C.italic}/Mji/WebExploit/Information-Gathering{C.reset}:~# {C.bold}{C.green}')
            #                 if mj:
            #                     if mj == '0':
            #                         print (f'{c.reset}')
            #                         aps.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         
            #                     if mj == '1':
            #                         print (f'{c.reset}')
            #                         ahf.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '2':
            #                         print (f'{c.reset}')
            #                         b64.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '3':
            #                         print (f'{c.reset}')
            #                         dirboster.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '4':
            #                         print (f'{c.reset}')
            #                         cfb.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '5':
            #                         print (f'{c.reset}')
            #                         cms.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '6':
            #                         print (f'{c.reset}')
            #                         ipl.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '7':
            #                         print (f'{c.reset}')
            #                         ping.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '8':
            #                         print (f'{c.reset}')
            #                         ril.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #                     if mj == '9':
            #                         print (f'{c.reset}')
            #                         sse.run()
            #                         input('press enter for back to menu and press CTRL+C for exit')
            #                         break
            #
            #                     else:
            #                         input(f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
            #                         continue
            #                 else:
                                   
            #            #         print (f'{C.red}ERROR!{c.white}\n\t Enter A Number of tools!\n{C.yellow}For exit press {C.white}[ {C.bold}CTRL+C{C.reset} ] !')
            #            #         cmd=input(f'{C.red}{C.bold}WebExploit{C.reset} - exit ? y/n -> {C.green}').lower()
            #              #       if 'y' in cmd:
            #                      #   print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
            #           #              sys.exit(0)
            #                     #     input(f'{C.red}{C.bold}WebExploit{C.white} -> Invalid Command Try Again [{C.bold}press enter{C.white}]')
            #                     #     continue
            #         except:
            #             print (f'{C.white}{C.red}{C.bold}WebExploit{C.white}{C.reset} \n\t\t Bye!')
            #             sys.exit(0)
            else:
                # input('\nerror\nBYE!\n')
                # os.system('clear')
                # break
                pass
        except:
            input(f'\nWebExploit -> Invalid Command \nBYE! ')
            break

WebExploit()

