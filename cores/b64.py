def run():
    '''
    MIT License

Copyright (c) 2022 MJi | DarkƤwn [github.com/c4ssif3r]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
    'pip install google-search'
    try:
        import time as t
        from colorama import Fore as f
        import sys, os
        import requests as r
        import paramiko
        from random import choice
        import base64
        import binascii
    except:
        print("\033[0;31m please run command \033[0;32m pip install -r requirements.txt !")
        t.sleep(1)
        sys.exit()

    black = "\033[0;30m"
    red = "\033[0;31m"
    green = "\033[0;32m"
    brown = "\033[0;33m"
    blue = "\033[0;34m"
    purple = "\033[0;35m"
    cyan = "\033[0;36m"
    l_gray = "\033[0;37m"
    dark_gray = "\033[1;30m"
    l_red = "\033[1;31m"
    l_green = "\033[1;32m"
    yellow = "\033[1;33m"
    l_blue = "\033[1;34m"
    l_purple = "\033[1;35m"
    l_cyan = "\033[1;36m"
    l_white = "\033[1;37m"
    faint = "\033[2m"
    italic = "\033[3m"
    underline = "\033[4m"
    blink = "\033[5m"
    nefative = "\033[7m"
    cross = "\033[9m"
    ended = "\033[0m"
    bold = "\033[1m"
    nbold = "\033[0m"
    white = f.WHITE

    bnr = ['''
                             ▄▄▄▄·   ▄▄▄ .  ·▄▄▄▄
                             ▐█ ▀█▪  ▀▄.▀·  ██· ██
                             ▐█▀▀█▄  ▐▀▀▪▄  ▐█▪ ▐█▌
                             ██▄▪▐█  ▐█▄▄▌  ██. ██
                             ·▀▀▀▀    ▀▀▀   ▀▀▀▀▀• ''', '''
                               ▄▄▄▄       ▓█████     ▓█████▄
                                ▓█████▄     ▓█   ▀     ▒██▀ ██▌
                                ▒██▒ ▄██    ▒███       ░██   █▌
                                ▒██░█▀      ▒▓█  ▄    ▒░▓█▄   ▌
                               ▒░▓█  ▀█▓    ░▒████    ░░▒████▓
                               ░░▒▓███▀▒    ░░ ▒░     ░ ▒▒▓  ▒
                               ░▒░▒   ░      ░ ░        ░ ▒  ▒
                                 ░    ░        ░        ░ ░  ░
                               ░ ░             ░          ░    ''']

    def r_bnr(bnr):
        return choice(bnr)

    print (f'{blink}{r_bnr(bnr)}{ended}', end='')
    t.sleep(2)
    print(f' {italic}From{ended} : ', end='')
    #create flush text [simple]
    print(f'{red}{bold}', end='', flush=True)
    print(f'{bold}W', end='', flush=True)
    t.sleep(0.5)
    print('e', end='', flush=True)
    t.sleep(0.7)
    print('b', end='', flush=True)
    t.sleep(0.4)
    print('E', end='', flush=True)
    t.sleep(0.1)
    print('x', end='', flush=True)
    t.sleep(0.2)
    print('p', end='', flush=True)
    t.sleep(0.3)
    print('l', end='', flush=True)
    t.sleep(0.4)
    print('o', end='', flush=True)
    t.sleep(0.5)
    print('i', end='', flush=True)
    t.sleep(1.5)
    print(f't{ended}', flush=True)
    nbold = "\033[0m" # tahe koskholi !
    t.sleep(1)
    print(f'{white}{nbold}')
# SIMPLE TOOL !
    print (f'\n                   {bold}{f.GREEN}[{f.WHITE}B*TOOL{f.GREEN}]{f.WHITE}{f.RED} B64-DEC-ENC{f.WHITE}{bold} BASE 16,32,64,85{nbold}.DEC.ENC{nbold} DECODER T00L !\n\n\n')
    t.sleep(3)




    while True:
        try:
            string = input(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}B64-DEC-ENC/{bold}DECODER-ENCODER{nbold}{f.WHITE} T00L . enter Your {bold}\'string{nbold}\' [ex: WebExploit | V2ViRXhwbG9pdAo=]:#{f.RED}{bold} ')
            print(f'{nbold}')

            if string:
                print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}B*/{bold}ENC-DEC{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{string}{nbold}\n')
                t.sleep(1)
                break
            else:
                continue

        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
 #           break
            sys.exit(0)

    t.sleep(2)
    strtype =input(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}B64-DEC-ENC/{bold}DEC-ENC{nbold}{f.WHITE} T00L . enter Your {bold}\'MODE{nbold}\' [ex: [1] DECODE, [2] ENCODE ]:#{f.BLUE}{bold} ')
    print(f'{nbold}')
    t.sleep(2)

    if strtype == '1' or strtype =='dec' or strtype == 'decode':
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}B*/DECODER/{bold}STRING{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{string}{nbold}\n')
        try:
            t.sleep(2)
            base16_bytes = string
            base16_bytes = base64.b16decode(base16_bytes)
            base16_message = base16_bytes.decode('ascii')
            t.sleep(1)
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}16{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base16_message}{nbold}\n')
        except Exception as err:
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}16{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.RED} SKIPPING {white}{bold}BASE 16 \'TYPE\'{nbold} Error: {err}\n')

        try:
            t.sleep(2)
            #string.decode('ascii')
            base32_bytes = string
            base32_bytes = base64.b32decode(base32_bytes)
            base32_message = base32_bytes.decode('ascii')
            t.sleep(1)
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}32{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base32_message}{nbold}\n')
        except Exception as err:
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}32{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.RED} SKIPPING {white}{bold}BASE 32 \'TYPE\'{nbold} Error: {err}\n')
        try:
            t.sleep(2)
            base64_bytes = string
            base64_bytes = base64.b64decode(base64_bytes)
            base64_message = base64_bytes.decode('ascii')
            t.sleep(1)
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}64{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base64_message}{nbold}\n')
        except Exception as err:
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}64{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.RED} SKIPPING {white}{bold}BASE 64 \'TYPE\'{nbold} Error: {err}\n')
        try:
            t.sleep(2)
            base85_bytes = string
            base85_bytes = base64.b85decode(base85_bytes)
            base85_message = base85_bytes.decode('ascii')
            t.sleep(1)
            print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}85{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base85_message}{nbold}\n')
        except Exception as err:
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}85{nbold}/{bold}DECODER{nbold}{f.WHITE}]{f.WHITE} SKIPPING {white}{bold}BASE 85 \'TYPE\'{nbold}\n')

    elif strtype == '2' or strtype =='enc' or strtype == 'encode':
        print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}B*/DECODER/{bold}STRING{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{string}{nbold}\n')
        t.sleep(2)
        base16_bytes = string.encode('ascii')
        base16_bytes = base64.b16encode(base16_bytes)
        base16_message = base16_bytes.decode('ascii')
        t.sleep(1)
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{white}{bold}16{nbold}/{bold}ENCODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base16_message}{nbold}\n')
        t.sleep(2)
        base32_bytes = string.encode('ascii')
        base32_bytes = base64.b32encode(base32_bytes)
        base32_message = base32_bytes.decode('ascii')
        t.sleep(1)
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{white}{bold}32{nbold}/{bold}ENCODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base32_message}{nbold}\n')
        t.sleep(1)
        base64_bytes = string.encode('ascii')
        base64_bytes = base64.b64encode(base64_bytes)
        base64_message = base64_bytes.decode('ascii')
        t.sleep(1)
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}64{nbold}/{bold}ENCODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base64_message}{nbold}\n')
        t.sleep(1)
        base85_bytes = string.encode('ascii')
        base85_bytes = base64.b85encode(base85_bytes)
        base85_message = base85_bytes.decode('ascii')
        t.sleep(1)
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}BASE{nbold}{bold}85{nbold}/{bold}ENCODER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{base85_message}{nbold}\n')
    else:
        print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] WHAT? {bold}\'{string}\'{nbold} ? EXITTING . . .')
        t.sleep(2)
        sys.exit(0)












