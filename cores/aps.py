def aps():
    '''
    MIT License

Copyright (c) 2022 MJi | DarkƤwn [github.com/c4ssif3r]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
    #import re
    import time as t
    from colorama import Fore as f
    from random import choice
    import sys, os

    black = "\033[0;30m"
    red = "\033[0;31m"
    green = "\033[0;32m"
    brown = "\033[0;33m"
    blue = "\033[0;34m"
    purple = "\033[0;35m"
    cyan = "\033[0;36m"
    l_gray = "\033[0;37m"
    dark_gray = "\033[1;30m"
    l_red = "\033[1;31m"
    l_green = "\033[1;32m"
    yellow = "\033[1;33m"
    l_blue = "\033[1;34m"
    l_purple = "\033[1;35m"
    l_cyan = "\033[1;36m"
    l_white = "\033[1;37m"
    faint = "\033[2m"
    italic = "\033[3m"
    underline = "\033[4m"
    blink = "\033[5m"
    nefative = "\033[7m"
    cross = "\033[9m"
    ended = "\033[0m"
    bold = "\033[1m"
    nbold = "\033[0m"
    white = f.WHITE
    bnr = ['''
                         ░█▀▀▄░▒█▀▀█░▒█▀▀▀█
                         ▒█▄▄█░▒█▄▄█░░▀▀▀▄▄
                         ▒█░▒█░▒█░░░░▒█▄▄▄█''', '''

                          ▄▄▄      ██▓███    ██████
                         ▒████▄   ▓██░  ██ ▒██    ▒
                         ▒██  ▀█▄ ▓██░ ██▓▒░ ▓██▄
                         ░██▄▄▄▄██▒██▄█▓▒ ▒  ▒   ██▒
                          ▓█   ▓██▒██▒ ░  ░▒██████▒▒
                          ▒▒   ▓▒█▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░
                           ░   ▒▒ ░▒ ░     ░ ░▒  ░
                           ░   ▒  ░░       ░  ░  ░
                               ░                 ░ ''']

    def r_bnr(bnr):
        return choice(bnr)

    print (f'{blink}{r_bnr(bnr)}{ended}', end='')
    t.sleep(2)
    print(f' {italic}From{ended} : ', end='')
    #create flush text [simple]
    print(f'{bold}W', end='', flush=True)
    t.sleep(0.5)
    print('e', end='', flush=True)
    t.sleep(0.7)
    print('b', end='', flush=True)
    t.sleep(0.4)
    print('E', end='', flush=True)
    t.sleep(0.1)
    print('x', end='', flush=True)
    t.sleep(0.2)
    print('p', end='', flush=True)
    t.sleep(0.3)
    print('l', end='', flush=True)
    t.sleep(0.4)
    print('o', end='', flush=True)
    t.sleep(0.5)
    print('i', end='', flush=True)
    t.sleep(1.5)
    print(f't{ended}', flush=True)
    nbold = "\033[0m" # tahe koskholi !
    t.sleep(1)



    print (f'\n                   {bold}{f.GREEN}[{f.WHITE}APS{f.GREEN}]{f.WHITE}{f.RED} A.P.S{f.WHITE}{nbold} {bold}A{nbold}dvanced {bold}P{nbold}ort {bold}S{nbold}canner tool !\n\n\n')
    t.sleep(3)

    print(f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{nbold}{f.WHITE}@{nbold}{f.RED}A.P.S/{f.WHITE}{bold}CONNECTOR{nbold}{f.WHITE}] {bold} Loading {nbold} {bold}{l_blue}CONNECTOR . . .{nbold}\n')
    import socket

    def single():
        import time as t
        while True:
            try:
                ip_addr = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}IP-ADDRESS{nbold}{f.WHITE} enter \'IP-ADDRESS-{bold}FILE{nbold}\' | (ex: /home/kali/Desktop/hosts.txt) [hosts.txt]:#{f.GREEN}{bold} ')

                if ip_addr:
                    try:
                        hosts = open(ip_addr, 'r').read().split()
                        print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{nbold}{f.WHITE}@{nbold}{f.RED}A.P.S/{f.WHITE}{bold}LOADER{nbold}{f.WHITE}] LOADED {bold} %s {nbold} HOSTS {bold}Successfully...{nbold}\n' % len(hosts))
                        t.sleep(1)
                        print (f'      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET{nbold}{f.WHITE}] {f.CYAN}HOSTS-FILE{f.WHITE} >>> {bold}{ip_addr}{nbold}\n')
                        break

                    except Exception as open_error:
                        print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} BECAUSE {red}{bold}{open_error}{f.WHITE} .\n')
                        continue
            except KeyboardInterrupt:
                print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                break
                break
                t.sleep(2)
                sys.exit()
                sys.exit(0)

        t.sleep(2)

        while True:
            try:
                port = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}PORT{nbold}{f.WHITE} ENTER \'PORT-NUM\' FOR START A.P.S PORT SCAN | ex:[22, 80, 443, 21]:#{f.GREEN}{bold} ')

                if port:
                    if int(port) <= 65535:
                        # defining known ports
                        if port == '22':
                            typ = 'ssh'
                        elif port == '21':
                            typ = 'ftp'
                        elif port == '23':
                            typ = 'telnet'
                        elif port == '25':
                            typ = 'smtp'
                        elif port == '53':
                            typ = 'dns'
                        elif port == '80':
                            typ = 'http'
                        elif port == '110':
                            typ = 'pop3'
                        elif port == '143':
                            typ = 'imap-4'
                        elif port == '443':
                            typ = 'https'
                        elif port == '67':
                            typ = 'dhcp'
                        elif port == '3306':
                            typ = 'mysql'
                        elif port == '69':
                            typ = 'tftp'
                        elif port == '123':
                            typ = 'ntp'
                        elif port == '161': #162
                            typ = 'snmp'
                        elif port == '134': # 134 to 140
                            typ = 'NetBios'
                        elif port == '445':
                            typ = 'Microsoft-DS'
                        elif port == '5432':
                            typ = 'postgresql'
                        elif port == '9100':
                            typ = 'jetdirect'
                        elif port == '2000':
                            typ = 'cisco-sccp'
                        elif port == '5900':
                            typ = 'vnc'
                        elif port == '1027':
                            typ = 'iis'
                        # end known ports
                    try:
                        print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}PORT[S]{nbold}{f.WHITE}] {f.CYAN}SINGLE PORT{f.WHITE} >>>{bold} {port}[{typ}]{nbold} \n')
                        t.sleep(2)
                        break
                    except Exception:
                        print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}PORT[S]{nbold}{f.WHITE}] {f.CYAN}SINGLE PORT{f.WHITE} >>>{bold} {port}{nbold} \n')
                        t.sleep(2)
                        break

                #print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}]  {bold}INVALID PORT{nbold} EXITTING . . .')
                    if int(port) > 65535:
                        print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} You Entered {bold}NOT VALID{f.WHITE}{nbold}[{bold}{f.YELLOW}PORT[S]{nbold}{f.WHITE}] PORT ~>{f.WHITE} [{red}{bold}{ip_addr}{nbold}{l_white}].\n')
                        t.sleep(3)
                        print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}]  {bold}INVALID PORT{nbold} !\n')
                        t.sleep(2)
                        continue

                    else:
                        pass
                else:
                    pass

            except KeyboardInterrupt:

                print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                t.sleep(2)
                sys.exit(0)
        try:
            timeot = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}DELAY{nbold}{f.WHITE} enter \'TIMEOT\' | (ex: 10, 5, 2, 100) [DEFAULT ~> 10]:#{f.CYAN}{bold} ')
            print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET{nbold}{f.WHITE}] {f.CYAN}TIMEOUT{f.WHITE} >>> {bold}{timeot}{nbold}\n')

        except Exception:
            timeot = 1
            # print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET{nbold}{f.WHITE}] {f.CYAN}TIMEOUT{f.WHITE} >>> {bold}{timeot}{nbold}\n')
            print (f'      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET-DEFAULT{nbold}{f.WHITE}] {f.CYAN}TIMEOUT{f.WHITE} >>> {bold}1{nbold}\n')
        # 2 try ??¿
        try:
            socket.setdefaulttimeout(int(timeot))
        except:
            timeot = 1
            socket.setdefaulttimeout(timeot)

        path = os.getcwd()


        print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}SAVING{bold}{f.GREEN} Results{nbold}{f.WHITE}] IN {f.WHITE}~> [{f.GREEN}{bold}{path}+hosts-aps-{port}-opens.txt{nbold}{f.WHITE}] file !\n')

        print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}LAUNCH{bold}{f.GREEN} SCANNING . . .{nbold}!\n')

        for single_host in hosts:
            try:
                socket_connector = socket.create_connection((single_host, int(port)))

                print (f'   {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{f.GREEN}OPEN-PORT:{bold}{f.GREEN}{port}{nbold}{f.WHITE}] HOST {f.WHITE}~> [{f.GREEN}{bold}{single_host}{nbold}{f.WHITE}] \n')
                with open(path+'hosts-aps-'+port+'-opens.txt', 'a+') as true_host:
                    true_host.write(single_host+'\n')

            except Exception as host_error:
                print (f'   {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{red}NOT-OPEN-PORT:{bold}{f.GREEN}{port}{nbold}{f.BLUE}] HOST {f.WHITE}~> [{f.RED}{bold}{single_host}{nbold}{f.WHITE}] \n')

    def multi():
        import time as t

        while True:
            try:
                port = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}PORT{nbold}{f.WHITE} enter \'PORT\' FOR START A.P.S PORT SCAN | ex:[21, 22, 80]:#{f.GREEN}{bold} ')

                if port:
                    if int(port) <= 65535:
                        # defining known ports
                        if port == '22':
                            typ = 'ssh'
                        elif port == '21':
                            typ = 'ftp'
                        elif port == '23':
                            typ = 'telnet'
                        elif port == '25':
                            typ = 'smtp'
                        elif port == '53':
                            typ = 'dns'
                        elif port == '80':
                            typ = 'http'
                        elif port == '110':
                            typ = 'pop3'
                        elif port == '143':
                            typ = 'imap-4'
                        elif port == '443':
                            typ = 'https'
                        elif port == '67':
                            typ = 'dhcp'
                        elif port == '3306':
                            typ = 'mysql'
                        elif port == '69':
                            typ = 'tftp'
                        elif port == '123':
                            typ = 'ntp'
                        elif port == '161': #162
                            typ = 'snmp'
                        elif port == '134': # 134 to 140
                            typ = 'NetBios'
                        elif port == '445':
                            typ = 'Microsoft-DS'
                        elif port == '5432':
                            typ = 'postgresql'
                        elif port == '9100':
                            typ = 'jetdirect'
                        elif port == '2000':
                            typ = 'cisco-sccp'
                        elif port == '5900':
                            typ = 'vnc'
                        elif port == '1027':
                            typ = 'iis'
                        # end known ports
                    try:
                        print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}PORT[S]{nbold}{f.WHITE}] {f.CYAN}SINGLE PORT{f.WHITE} >>>{bold} {port}[{typ}]{nbold} \n')
                        t.sleep(2)
                        break
                    except KeyboardInterrupt:
                        print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                        t.sleep(2)
                        break
                        sys.exit()

                #print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}]  {bold}INVALID PORT{nbold} EXITTING . . .')
                    if int(port) > 65535:
                        print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} You Entered {bold}NOT VALID{f.WHITE}{nbold}[{bold}{f.YELLOW}PORT[S]{nbold}{f.WHITE}] PORT ~>{f.WHITE} [{red}{bold}{ip_addr}{nbold}{l_white}].\n')
                        t.sleep(3)
                        print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}]  {bold}INVALID PORT{nbold} !\n')
                        t.sleep(2)
                        continue

                    else:
                        pass
                else:
                    pass

            except KeyboardInterrupt:

                print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                t.sleep(2)
                sys.exit(0)
        try:
            print (f'\n   {f.WHITE}[{f.RED}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}{bold}TIMEOUT{white} if you set time out more than 10 sec = {red}{bold}ASP{nbold}{white} sleep 10 sec after a scan !\n')
            t.sleep(1)
            timeot = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}DELAY{nbold}{f.WHITE} enter \'TIMEOT\' | (ex: 10, 5, 2, 100) [DEFAULT ~> 1]:#{f.CYAN}{bold} ')
            if timeot:
                print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET{nbold}{f.WHITE}] {f.CYAN}TIMEOUT{f.WHITE} >>> {bold}{timeot}{nbold}\n')
            else:
                timeot = 1

                print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET-DEFAULT{nbold}{f.WHITE}] {f.CYAN}TIMEOUT{f.WHITE} >>> {bold}1{nbold}\n')

        except KeyboardInterrupt:
            print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            sys.exit(0)
            # timeot = 1
            #
            # print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}SET-DEFAULT{nbold}{f.WHITE}] {f.CYAN}TIMEOUT{f.WHITE} >>> {bold}1{nbold}\n')
        # 2 try ??¿
        try:
            socket.setdefaulttimeout(int(timeot))
        except:
            timeot = 1
            socket.setdefaulttimeout(timeot)
        t.sleep(1)





        while True:
            try:
                ip = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}IP-ADDRESS{nbold}{f.WHITE} enter \'IP-{bold}ADDRESS{nbold}\' | (ex: 5.13.*.*) [should ip have \'*\' ! [ the \'*\' range !]]:#{f.GREEN}{bold} ')
                t.sleep(1)
                ect = ip.count('*')
                if ip:
                    if ect == 1:
                        print (f'\n      {f.WHITE}[{bold}{f.YELLOW}IP{nbold}{f.WHITE}] SET-IP ~>{f.WHITE} [{red}{bold}{ip}{nbold}{f.WHITE}]\n')
                        break
                    if ip == None:
                        print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} IN {red}{bold}IP:{ip}{f.WHITE} max \'*\' == 1 but you entered {str(ect)} {nbold} ! .\n')
                        continue
                    if ect > 1:
                        print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} IN {red}{bold}IP{f.WHITE} max \'*\' == 1 but you entered {str(ect)} {nbold} ! .\n')
                        continue
                    else:
                        pass
                else:
                    print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} IN {red}{bold}IP{f.WHITE} plz enter a IPv4 {nbold} ! .\n')
                    continue

                #print (f'\n      {f.WHITE}[{bold}{f.YELLOW}IP{nbold}{f.WHITE}] SET-IP ~>{f.WHITE} [{red}{bold}{ip}{nbold}{f.WHITE}]\n')

                    #except Exception as i_error:
                       # print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} BECAUSE {red}{bold}{i_error}{f.WHITE}  {nbold} ! .\n')
                       # continue

            except KeyboardInterrupt:
                print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} | EXITTING . . .')
                sys.exit()
                break
                t.sleep(2)
                sys.exit(0)

        t.sleep(1)
        while True:
            try:
                ip_range = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}IP-RANGE[1]{nbold}{f.WHITE}  enter \'IP-RANGE-{bold}0-255{nbold}\' | (ex: 255) [only type 255 !]:#{f.GREEN}{bold} ')
                if int(ip_range) <= 255:
                    print (f'\n      {white}[{bold}{f.YELLOW}IP-RANGE{nbold}{f.WHITE}] RANGE ~>{f.WHITE} [{red}{bold}{ip_range}{nbold}{l_white}].\n')
                    break
                if int(ip_range) > 255 or None:
                    print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} You Entered {bold}MORE THAN{f.WHITE}{nbold}[{bold}{f.YELLOW}RANGE{nbold}{f.WHITE}] Using {bold}DEFAULT{nbold}-RANGE.\n')
                    t.sleep(1)
                    print (f'\n      {white}[{bold}{f.YELLOW}IP-RANGE-DEFAULT{nbold}{f.WHITE}] RANGE ~>{f.WHITE} [{red}{bold}{ip_range}{nbold}{l_white}].\n')
                    t.sleep(1)
                    ip_range = 255
                    t.sleep(1)
                    print (f'\n      {white}[{bold}{f.YELLOW}ip-RANGE{nbold}{f.WHITE}] RANGE[DEFAULT] ~>{f.WHITE} [{red}{bold}{ip_range}{nbold}{white}].\n')
                    break
            except KeyboardInterrupt:
                print(f'\n\n      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                break
                t.sleep(2)
                sys.exit()

                # print (f'\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} You Entered {bold}NOT VALID{f.WHITE}{nbold}[{bold}{f.YELLOW}IP-RANGE{nbold}{f.WHITE}] RANGE ~>{f.WHITE} [{red}{bold} {ip_range} {nbold}{white}].\n')
                # t.sleep(2)
                # print (f'\n      {white}[{bold}{f.YELLOW}IP-RANGE-DEFAULT{nbold}{f.WHITE}] RANGE ~>{f.WHITE} [{red}{bold}255{nbold}{white}].\n')
                # ip_range = 255

        ip_range = int(ip_range)
        ip_range += 1
        if ect == 1:

            print (f'\n   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}{bold}SET-1-\'*\'{white} Found a \'*\' {nbold}{f.WHITE} in [{ip}] !\n')
            t.sleep(1)

            path = os.getcwd()


            print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}SAVING{bold}{f.GREEN} Results{nbold}{f.WHITE}] IN {f.WHITE}~> [{f.GREEN}{bold}{path}aps-multi-{port}-opens.txt{nbold}{f.WHITE}] file !\n')

            print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}LAUNCH{bold}{f.GREEN} SCANNING . . .{nbold}!\n')
            t.sleep(1)
            for i in range(0, int(ip_range)):
                ipq = ip.replace('*', str(i))
                try:

                    socket_connector = socket.create_connection((str(ipq), int(port)))

                    print (f'   {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{f.GREEN}OPEN-PORT:{bold}{f.GREEN}{port}{nbold}{f.WHITE}] HOST {f.WHITE}~> [{f.GREEN}{bold}{ipq}{nbold}{f.WHITE}] \n')

                    with open(path+'hosts-multi-'+port+'-opens.txt', 'a+') as true_host:
                        true_host.write(ipq+'\n')

                except Exception as host_error:
                    print (f'   {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{red}NOT-OPEN-PORT:{bold}{f.GREEN}{port}{nbold}{f.BLUE}] HOST {f.WHITE}~> [{f.RED}{bold}{ipq}{nbold}{f.WHITE}] \n')








    while True:
        try:
            select = input(f'  {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}MODE{nbold}{f.WHITE}| (1 (SINGLE), 2 (MULTI-WITH-FILE)]:#{f.GREEN}{bold} ')

        except Exception as s_e:
            print (f'\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} BECAUSE: {bold}[{s_e}] {nbold} EXITTING . . .\n')
            t.sleep(2)
            break
            sys.exit()


        if select == '1':
            print(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}MODE[1]{nbold}{f.WHITE}')
            t.sleep(2)
            print (f'\n   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}{bold}Loading{white} MODE 1 [{bold}MULTI-HOST-FILE{nbold}] !\n\n\n')
            single()
        if select == '2':
            print(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}MODE[2]{nbold}{f.WHITE}')
            t.sleep(2)
            print (f'\n   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}{bold}Loading{white} MODE 2 [{bold}SINGLE{nbold}] !\n\n\n')
            multi()
        if select == None:
            print (f'\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} MODE {bold}[NOT SELECTED] {red}{nbold} EXITTING . . .\n')
            sys.exit()



        # if ect == 2:
        #
        #     print (f'\n   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}{bold}SET-2-\'*\'{white} Found TWO-2 \'*\' {nbold}{f.WHITE} in [{ip}] !\n')
        #     t.sleep(1)
        #
        #     path = os.getcwd()
        #
        #     print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}SAVING{bold}{f.GREEN} Results{nbold}{f.WHITE}] IN {f.WHITE}~> [{f.GREEN}{bold}{path}aps-multi-{port}-opens.txt{nbold}{f.WHITE}] file !\n')
        #     t.sleep(2)
        #     print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}A.P.S/{f.CYAN}LAUNCH{bold}{f.GREEN} SCANNING . . .{nbold}!\n')
        #     t.sleep(1)
        #
        #
        #     for i in range(0, int(ip_range)):
        #         #ipq = ip.replace('*', str(i))
        #         for t in range(int(ip_range)):
        #             ipqq = ip.replace('*', str(t))
        #             try:
        #                 socket_connector = socket.create_connection((str(ipqq), int(port)))
        #                 print (f'   {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{f.GREEN}OPEN-PORT:{bold}{f.GREEN}{port}{nbold}{f.WHITE}] HOST {f.WHITE}~> [{f.GREEN}{bold}{ipqq}{nbold}{f.WHITE}] \n')
        #                 with open(path+'hosts-multi-'+port+'-opens.txt', 'a+') as true_host:
        #                     true_host.write(ipqq+'\n')
        #             except Exception as host_error:
        #                 print (f'   {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{red}NOT-OPEN-PORT:{bold}{f.GREEN}{port}{nbold}{f.BLUE}] HOST {f.WHITE}~> [{f.RED}{bold}{ipqq}{nbold}[{host_error}]{f.WHITE}] \n')








        #ip_range2 = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}IP-RANGE[oct[3]]{nbold}{f.WHITE} enter \'IP-RANGE-{bold}0-255{nbold}\' | (ex: 255) [only type 255 !]:#{f.GREEN}{bold} ')






















     #   print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} You Entered {bold}NOT VALID{f.WHITE}{nbold}[{bold}{f.YELLOW}IP-ADDR{nbold}{f.WHITE}] NOT VALID {f.WHITE} [{red}{bold}{ip_error}{nbold}{l_white}].\n')
        #sys.exit(0)
    #print (f'\n      {f.WHITE}{nbold}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}A.P.S/{bold}iP{nbold}{f.WHITE}] {f.CYAN}TARGET-IP{f.WHITE} >>> {bold}{ip_addr}{nbold}\n')


    #print (f'\n      {f.WHITE}[{f.RED}{bold}ERROR{nbold}{f.WHITE}]{f.YELLOW} You Entered {bold}NOT VALID{f.WHITE}{nbold}[{bold}{f.YELLOW}IP-ADDR{nbold}{f.WHITE}] OUT OF RANGE{f.WHITE} {red}{bold}{ip_error}{nbold}{l_white}.\n')
# g = socket.create_connection(("1.1.1.1",80))

# socket.setdefaulttimeout(10)
# print(f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{nbold}{f.WHITE}@{nbold}{f.RED}A.P.S/{f.WHITE}{bold}CONNECTOR{nbold}{f.WHITE}] {red} Can\'t Load {bold}CONNECTOR !{nbold}{yellow}Error: {bold}{connector_error}{nbold} \n')



#    print(f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{nbold}{f.WHITE}@{nbold}{f.RED}A.P.S/{f.WHITE}{bold}CONNECTOR{nbold}{f.WHITE}] LOADED {bold} CONNECTOR {nbold} Loaded {bold}{green}Successfully...{nbold}\n')


