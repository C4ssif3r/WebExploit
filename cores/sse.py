def run():
    '''
    MIT License

Copyright (c) 2022 MJi | DarkƤwn [github.com/c4ssif3r]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
    'pip install google-search'
    try:
        import time as t
        from colorama import Fore as f
        import sys, os
        from random import choice
        import shodan
    except:
        print("\033[0;31m please run command \033[0;32m pip install -r requirements.txt !")
        t.sleep(1)
        sys.exit()

    black = "\033[0;30m"
    red = "\033[0;31m"
    green = "\033[0;32m"
    brown = "\033[0;33m"
    blue = "\033[0;34m"
    purple = "\033[0;35m"
    cyan = "\033[0;36m"
    l_gray = "\033[0;37m"
    dark_gray = "\033[1;30m"
    l_red = "\033[1;31m"
    l_green = "\033[1;32m"
    yellow = "\033[1;33m"
    l_blue = "\033[1;34m"
    l_purple = "\033[1;35m"
    l_cyan = "\033[1;36m"
    l_white = "\033[1;37m"
    faint = "\033[2m"
    italic = "\033[3m"
    underline = "\033[4m"
    blink = "\033[5m"
    nefative = "\033[7m"
    cross = "\033[9m"
    ended = "\033[0m"
    bold = "\033[1m"
    nbold = "\033[0m"
    white = f.WHITE

    bnr = ['''
                           ██████       ██████     ▓█████
                         ▒██    ▒     ▒██    ▒     ▓█   ▀
                         ░ ▓██▄       ░ ▓██▄       ▒███
                           ▒   ██▒      ▒   ██▒    ▒▓█  ▄
                         ▒██████▒▒    ▒██████▒▒    ░▒████
                         ▒ ▒▓▒ ▒ ░    ▒ ▒▓▒ ▒ ░    ░░ ▒░
                         ░ ░▒  ░      ░ ░▒  ░       ░ ░
                         ░  ░  ░      ░  ░  ░         ░
                               ░            ░         ░  ''', '''
                         ░▒█▀▀▀█░░░▒█▀▀▀█░░░▒█▀▀▀
                         ░░▀▀▀▄▄░░░░▀▀▀▄▄░░░▒█▀▀▀
                         ░▒█▄▄▄█░░░▒█▄▄▄█░░░▒█▄▄▄ ''']

    def r_bnr(bnr):
        return choice(bnr)

    print (f'{blink}{r_bnr(bnr)}{ended}', end='')
    t.sleep(2)
    print(f' {italic}From{ended} : ', end='')
    #create flush text [simple]
    print(f'{red}{bold}', end='', flush=True)
    print(f'{bold}W', end='', flush=True)
    t.sleep(0.5)
    print('e', end='', flush=True)
    t.sleep(0.7)
    print('b', end='', flush=True)
    t.sleep(0.4)
    print('E', end='', flush=True)
    t.sleep(0.1)
    print('x', end='', flush=True)
    t.sleep(0.2)
    print('p', end='', flush=True)
    t.sleep(0.3)
    print('l', end='', flush=True)
    t.sleep(0.4)
    print('o', end='', flush=True)
    t.sleep(0.5)
    print('i', end='', flush=True)
    t.sleep(1.5)
    print(f't{ended}', flush=True)
    nbold = "\033[0m" # tahe koskholi !
    t.sleep(1)
    print(f'{white}{nbold}')

    print (f'\n                   {bold}{f.GREEN}[{f.WHITE}SSE{f.GREEN}]{f.WHITE}{f.RED} S.S.E{f.WHITE}{bold} S{nbold}odan {bold}S{nbold}earch {bold}E{nbold}ngine T00L !\n\n\n')
    t.sleep(3)

    save_question = input(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}SAVER{nbold}{f.WHITE} Save You\'r Logs To a .txt File? {bold}\'LOG_FILE\'{nbold} [ex: Y/y | N/n]:#{f.GREEN}{bold} ').lower()

    log = ('')
    data = ('')

    def saver(data):
        file = open((log) + ".txt", "a")
        file.write(data)
        file.close()

    if save_question.startswith("y"):
        log = input(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}SAVER{nbold}{f.WHITE} Give The Log\'s File Name ! {bold}\'LOG_FILE_NAME\'{nbold} [ex: MyLogs]:#{f.GREEN}{bold} ')
        #log = (log + '.txt')
        #print(pt)
        print (f'\n      {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}Log\'s File Name{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{log}{nbold}')

    else:
        print (f'\n      {f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}SAVER{nbold}{f.GREEN}{bold} SAVING \'SKIPPED\'{f.WHITE} ')

    t.sleep(2)
    print(f'{nbold}')
    while True:
        try:
            api_key = input(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}SAVER{nbold}{f.WHITE} GIVE ME A {bold}\'SHODAN_API_KEY\'{nbold} [ex: J2IdjIAjdiWiJVn...]:#{f.GREEN}{bold} ') #.rstrip("\n")
            if api_key:
                break
            else:
                continue

        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
            sys.exit(0)


    t.sleep(3)
    print(f'{nbold}')
    print (f'\n      {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}API KEY{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{api_key}{nbold}\n')
    t.sleep(0.5)
    api = shodan.Shodan(api_key)
    limit_num = 888
    count_num = 1

    try:

        print (f'      {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}VERIFY [Shodan.io] API KEY{nbold}{f.WHITE}]{f.WHITE}{bold} CHECKING . . .{nbold}\n')
        api.search("WebExploit")
        t.sleep(1)
        print (f'      {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}API KEY \'Authentication\' {nbold}{f.WHITE}] >>> {f.GREEN}{bold} SUCCESS . . .{nbold}\n')

        searcher = input(f'\n  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}S.S.E/{bold}SAVER{nbold}{f.WHITE} Enter You\'r {bold}\'KEYWORD[s]\'{nbold} [ex: port:80 http.title:"HACKED"]:#{f.GREEN}{bold} ')

        count_num = count_num + 1

        for result in api.search_cursor(searcher):
            ip = (result["ip_str"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}IP{nbold}{f.WHITE} >>> {bold}{green}{bold}{ip}{nbold}\n')
            t.sleep(0.1)
            port = (result["port"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}PORT{nbold}{f.WHITE} >>> {bold}{green}{bold}{port}{nbold}\n')
            t.sleep(0.1)
            org = (result["org"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}ORGANIZATION{nbold}{f.WHITE} >>> {bold}{green}{bold}{org}{nbold}\n')
            t.sleep(0.1)
            loc = (result["location"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}LOCATION{nbold}{f.WHITE} >>> {bold}{green}{bold}{loc}{nbold}\n')
            t.sleep(0.1)
            tra = (result["transport"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}LAYER{nbold}{f.WHITE} >>> {bold}{green}{bold}{tra}{nbold}\n')
            t.sleep(0.1)
            dom = (result["domains"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}DOMAIN\'S{nbold}{f.WHITE} >>> {bold}{green}{bold}{dom}{nbold}\n')
            t.sleep(0.1)
            hosts = (result["hostnames"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}HOST-NAME\'S{nbold}{f.WHITE} >>> {bold}{green}{bold}{hosts}{nbold}\n')
            t.sleep(0.1)
            d = (result["data"])
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}INFORMATION-SERVICE{nbold}{f.WHITE} >>> {bold}{green}{bold}{d}{nbold}\n')
            t.sleep(0.5)
            print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}SEARCH QUERY{nbold}{f.WHITE} >>> {bold}{green}{bold}{(str(count_num))}{nbold}\n')
            t.sleep(0.5)
            data = ("\t\n\nIP: " + str(result["ip_str"]) + ("\nPORT: " + str(result["port"])) + ("\nORGANIZATION: " + str(result["org"])) + ("\nLOCATION: " + str(result["location"])) + ("\nLAYER: " + str(result["transport"])) + ("\nDOMAINS: " + str(result["domains"])) + ("\nHOSTNAMES: " + str(result["hostnames"])) + ("\nDATA\n" + result["data"]))

            saver(data)

            t.sleep(0.3)
            count_num += 1
            if count_num >= limit_num:
                #os.system(f('mv {log} {pt}'))
                exit()
    except KeyboardInterrupt:

            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
            sys.exit(0)

    except shodan.APIError as shodan_key_error:
            print (f'      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.RED}S.S.E/{bold} !!! \'ERROR\' !!!{nbold}{f.WHITE}] >>> {f.GREEN}{bold} {shodan_key_error} {nbold}\n')
            print(f'\n\n      {nbold}{f.WHITE}{f.RED}{bold}EXITTING . . .')
            t.sleep(3)
            sys.exit(0)












