def run():
    '''
    MIT License

Copyright (c) 2022 MJi | DarkƤwn [github.com/c4ssif3r]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
    mji = ''' powered by
  ███▄ ▄███▓     ▄▄▄██▀▀      ██
 ▓██▒▀█▀ ██▒       ▒██      ▒▓██
 ▓██    ▓██░       ░██      ░▒██
 ▒██    ▒██     ▓██▄██▓      ░██
▒▒██▒   ░██▒     ▓███▒       ░██
░░ ▒░   ░  ░     ▒▓▒▒░       ░▓
░░  ░      ░     ▒ ░▒░        ▒
 ░      ░        ░ ░ ░        ▒
░       ░        ░   ░        ░
'''
    try:
        import json
        import time as t
        import sys, os
        from colorama import Fore as f
        import requests as r
        from random import choice
        from fake_headers import Headers
    except:
        print("\033[0;31m please run command \033[0;32m pip install -r requirements.txt !")
        t.sleep(1)
        sys.exit()
    global my_ip
    my_ip = "Unknown [Can't Get Your Ip]"
    black = "\033[0;30m"
    red = "\033[0;31m"
    green = "\033[0;32m"
    brown = "\033[0;33m"
    blue = "\033[0;34m"
    purple = "\033[0;35m"
    cyan = "\033[0;36m"
    l_gray = "\033[0;37m"
    dark_gray = "\033[1;30m"
    l_red = "\033[1;31m"
    l_green = "\033[1;32m"
    yellow = "\033[1;33m"
    l_blue = "\033[1;34m"
    l_purple = "\033[1;35m"
    l_cyan = "\033[1;36m"
    l_white = "\033[1;37m"
    faint = "\033[2m"
    italic = "\033[3m"
    underline = "\033[4m"
    blink = "\033[5m"
    nefative = "\033[7m"
    cross = "\033[9m"
    ended = "\033[0m"
    bold = "\033[1m"
    nbold = "\033[0m"
    white = f.WHITE

    bnr = ['''
                         ▪     ▄▄▄·  ▄▄▌
                         ██   ▐█ ▄█  ██•
                         ▐█·   ██▀·  ██ ▪
                         ▐█▌  ▐█▪·•  ▐█▌ ▄
                         ▀▀▀  .▀     .▀▀▀  ''', '''
                           ██     ██▓███       ██▓
                         ▒▓██    ▓██░  ██     ▓██▒
                         ░▒██    ▓██░ ██▓▒    ▒██░
                          ░██    ▒██▄█▓▒ ▒    ▒██░
                          ░██    ▒██▒ ░  ░    ░██████
                          ░▓     ▒▓▒░ ░  ░    ░ ▒░▓
                           ▒     ░▒ ░         ░ ░ ▒
                           ▒     ░░             ░ ░
                           ░                      ░ ''']

    def r_bnr(bnr):
        return choice(bnr)
    print(f'{bold}')
    print (f'{blink}{r_bnr(bnr)}{ended}', end='')
    t.sleep(2)
    print(f' {italic}From{ended} : ', end='')
    #create flush text [simple]
    print(f'{red}{bold}', end='', flush=True)
    print(f'{bold}W', end='', flush=True)
    t.sleep(0.5)
    print('e', end='', flush=True)
    t.sleep(0.7)
    print('b', end='', flush=True)
    t.sleep(0.4)
    print('E', end='', flush=True)
    t.sleep(0.1)
    print('x', end='', flush=True)
    t.sleep(0.2)
    print('p', end='', flush=True)
    t.sleep(0.3)
    print('l', end='', flush=True)
    t.sleep(0.4)
    print('o', end='', flush=True)
    t.sleep(0.5)
    print('i', end='', flush=True)
    t.sleep(1.5)
    print(f't{ended}', flush=True)

    nbold = "\033[0m" # tahe koskholi !
    t.sleep(1)
    print(f'{white}{nbold}')
    try:
        my_ip = public = r.get("https://api.ipify.org").text
    except:
        pass
    print (f'\n                   {bold}{f.GREEN}[{f.WHITE}IPL{f.GREEN}]{f.WHITE}{f.RED} I.P.L{f.WHITE}{bold} IP{nbold} {bold}L{nbold}ocation{bold} T00L !{nbold}\n\n\n')
    t.sleep(3)
    while True:
        try:
            #my_ip = public = r.get("https://api.ipify.org").text
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}IpLocation{f.WHITE}] {bold}YOUR PUBLIC IP{nbold}{f.WHITE} >>> {bold}{my_ip}{nbold}\n')
            t.sleep(1)
            #print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}IpLocation{f.WHITE}] {bold}TARGET{nbold}{f.WHITE} >>> {bold}{address}{nbold}\n')
            t.sleep(3)
            address = input(f'  {f.WHITE}[{f.CYAN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}I.P.L/{bold}IPL{white}{nbold}[{bold}{green}TARGET{white}{nbold}]{nbold}{f.WHITE} enter \'\IP v4 ADDRESS{nbold}\' [ex: 5.238.12.159]:#{f.GREEN}{bold} ')
            print(f'{nbold}')
            if address:
                ip = address
                f_url = (f'http://ip-api.com/json/{ip}?fields=status,message,continent,country,countryCode,region,regionName,city,district,zip,lat,lon,timezone,offset,currency,isp,org,as,asname,reverse,mobile,proxy,hosting,query')
                #print (len(address))
                if len(address) < 7:
                    print (f'   {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.RED}I.P.L/{f.GREEN}IP{white}] {nbold}{f.CYAN} IP IS VERY {bold}SHORT{nbold}\n')
                    continue
                    t.sleep(1)
                else:
                    print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}IpLocation{f.WHITE}] {bold}TARGET{nbold}{f.WHITE} >>> {bold}{address}{nbold}\n')
                    t.sleep(1)
                    break
        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
 #          break
            sys.exit(0)

    t.sleep(3)
    print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}I.P.L/{f.CYAN}CHECKER{f.WHITE}]  CHECKING IP FOR VERYFYING [{bold}{green}{address}{nbold}{white}]\n')
    t.sleep(2)

    bytes = address.split(".")
    for ip_byte in bytes:
       if int(ip_byte) < 0 or int(ip_byte) > 255:
           print (f'   {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.RED}I.P.L/{f.GREEN}IP{white}] {nbold}{f.CYAN} {bold}IP IS NOT VALID {bold}{red}{address}{nbold}\n')
           t.sleep(1)
           print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}INFO{f.WHITE}{nbold}]  EXITTING . . .')
           t.sleep(1)
           sys.exit()
    print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.RED}I.P.L/{f.CYAN}CHECKER{f.WHITE}] {bold}IP VERIFIED {nbold}[{bold}{green}{address}{nbold}{white}]\n')

    #make request
    headers = Headers(browser='opera',os='win',headers=True).generate()
    response = r.get(f_url, headers=headers)

    response_js = response.text
    texts = json.loads(response_js)
    try:
        ip = texts['query']
        status = texts['status']
        continent = texts["continent"]
        #continentCode = texts['continentCode']
        country = texts['country']
        countryCode = texts['countryCode']
        region = texts['region']
        regionName = texts['regionName']
        city = texts['city']
        district = texts['district']
        zipp = texts['zip']
        lat = texts['lat']
        lon = texts['lon']
        timezone = texts['timezone']
        offset = texts['offset']
        currency = texts['currency']
        isp = texts['isp']
        org = texts['org']
        As = texts['as']
    except:
        pass
    #if 'as' in rjs:
    for results in texts:

        print (f'\n\n      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}STATUS{nbold}{f.WHITE} >>> {bold}{green}{bold}{status}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}IP{nbold}{f.WHITE} >>> {bold}{green}{bold}{ip}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}country{nbold}{f.WHITE} >>> {bold}{green}{bold}{country}{nbold}')
        t.sleep(0.3)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}region{nbold}{f.WHITE} >>> {bold}{green}{bold}{region}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}countryCode{nbold}{f.WHITE} >>> {bold}{green}{bold}{countryCode}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}CONTINENT{nbold}{f.WHITE} >>> {bold}{green}{bold}{continent}{nbold}')
        t.sleep(0.3)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}REGION-NAME{nbold}{f.WHITE} >>> {bold}{green}{bold}{regionName}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}CITY{nbold}{f.WHITE} >>> {bold}{green}{bold}{city}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}DISTRICT{nbold}{f.WHITE} >>> {bold}{green}{bold}{district}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}ZIP{nbold}{f.WHITE} >>> {bold}{green}{bold}{zipp}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}LATITUDE{nbold}{f.WHITE} >>> {bold}{green}{bold}{lat}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}LONG-TITUDE{nbold}{f.WHITE} >>> {bold}{green}{bold}{lon}{nbold}')
        t.sleep(0.5)
        #print (f'      {f.WHITE}[{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}zipp{nbold}{f.WHITE} >>> {green}{zipp}{nbold}\n')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{f.RED}{bold}WebExploit{nbold}{f.WHITE}] {white}{bold}TIME-ZONE{nbold}{f.WHITE} >>> {bold}{green}{bold}{timezone}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}OFFSET{nbold}{f.WHITE} >>> {bold}{green}{bold}{offset}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}CURRENCY{nbold}{f.WHITE} >>> {bold}{green}{bold}{currency}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}ISP{nbold}{f.WHITE} >>> {bold}{green}{bold}{isp}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}ORG{nbold}{f.WHITE} >>> {bold}{green}{bold}{org}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}AS{nbold}{f.WHITE} >>> {bold}{green}{bold}{As}{nbold}')
        t.sleep(0.5)
        print (f'      {f.WHITE}[{bold}{f.RED}WebExploit{nbold}{f.WHITE}] {white}{bold}GOOGLE-MAP{nbold}{f.WHITE} >>> {bold}{green}{bold}http://www.google.com/maps/place/{lat},{lon}/@{lat},{lon},16z {nbold} ')
        t.sleep(0.5)
        break



